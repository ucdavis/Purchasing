@model Purchasing.Mvc.Models.WorkgroupAddressViewModel

@{
    @await Html.PartialAsync("_JsBundle", "~/bundles/jqueryTmpl")
}

@{
    ViewBag.Title = Model.Workgroup.Name;
    ViewBag.StepName = "Add Shipping Addresses";
    ViewBag.Previous = Url.Action("Vendors", "Wizard", new { id = Model.Workgroup.Id });
    ViewBag.Skip = Url.Action("Addresses", "Wizard", new { id = Model.Workgroup.Id});
    ViewBag.IsAdministrative = Model.Workgroup.Administrative;
    ViewBag.IsAccountSync = false;
}
@section AdditionalScripts
{

    <script type="text/javascript">
        $(function () {

            $("#AddressSearch").autocomplete({
                source: function (request, response) {
                    var searchUrl = '@Url.Action("SearchAddress", "Workgroup")';
                    $("#loader-image").toggle();
                    $.getJSON(searchUrl, { searchTerm: request.term }, function (results) {

                        response($.map(results, function (item) {
                            return {
                                label: item.Name,
                                value: item.Id
                            };
                        }));
                        $("#loader-image").toggle();
                    });
                },
                minLength: 3,
                select: function (event, ui) {

                    // set the selected vendor
                    //$("#WorkgroupVendor_VendorId").val(ui.item.value);
                    $("#WorkgroupAddress_AeLocationCode").val(ui.item.value);
                    $("#AeLocationCode_Selected").html(ui.item.value);

                    getSelectedAddress(ui.item.value);

                    return false;

                }
            });

        });

        function getSelectedAddress(locationCode) {

            var getAddressUrl = '@Url.Action("GetAddress", "Workgroup")';

            $.getJSON(getAddressUrl, { searchTerm: locationCode }, function (results) {
                $("#WorkgroupAddress_Building").val(results.Building);
                $("#WorkgroupAddress_Room").val(results.Room);
                $("#WorkgroupAddress_Address").val(results.Address);
                $("#WorkgroupAddress_City").val(results.City);
                $("#WorkgroupAddress_State").val(results.State);
                $("#WorkgroupAddress_Zip").val(results.Zip);

            });
        }

    </script>

    <script type="text/javascript">
        $(function () {
            $(".showTip").qtip({ position: { my: 'left middle', at: 'right middle' } });
        });
    </script>

    <script id="select-option-template" type="text/x-jquery-tmpl">
        <option value="${id}">${name}</option>
    </script>

}




@await Html.PartialAsync("_StatusBar", Model.Workgroup.Id) 
     
     @{
         var helpText = "To add a shipping enter the fields below.</br></br>When an order is placed, only the name will be displayed to the requester.";
     }


@using (Html.BeginForm()) {
	@Html.AntiForgeryToken()
	@Html.ValidationSummary(true)
    @await Html.PartialAsync("_Navigation")
<section class="ui-corner-all">
@* Legend is required if you have more than one widget/unit to help the user understand what is being asked of them.
Example: Dinosaur 1  *@
	<header class="ui-corner-top ui-widget-header">Workgroup Address <a href="#" id="help-address-page" class="ui-icon ui-icon-help showTip" title="@helpText" ></a></header>
    
        <div class="section-text">

            @*<h4>Form Header</h4>*@
            @*<p>Be specific so the user understands what exactly you are looking for.  Example: After Dinosaur 1 moves out of his/her parents' den what will Dinosaur 1 do?  We need to know his employment plan, feeding area, as well as living situation.  This information will not be sold or given to carnivores.</p>*@
            <p>All required fields are in <strong>bold</strong> and have a red <span class="required">*</span> next to the field label.</p>

        </div>
    <div class="section-contents">
     


        <ul>
            <li>
                <div class="editor-label required">
                    @Html.LabelFor(model => model.WorkgroupAddress.Name)<span>*</span> 
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.WorkgroupAddress.Name)
                    @Html.ValidationMessageFor(model => model.WorkgroupAddress.Name)
                </div>
            </li>
                <li>
                    <div class="editor-label">
                        Campus Address Search
                    </div>
                    <div class="editor-field">
                        <input type="text" id="AddressSearch" />
                        @Html.Hidden("WorkgroupAddress.AeLocationCode")

                        @Html.ValidationMessageFor(a => a.WorkgroupAddress.AeLocationCode)
                        <span id="loader-image" style="display: none;"><img src='@Url.Image("ajax-loader.gif")' /></span>
                    </div>
                </li>

                <li>
                    <div class="editor-label">
                        @Html.LabelFor(model => model.WorkgroupAddress.AeLocationCode)
                    </div>
                    <div class="editor-field">
                        <span id="AeLocationCode_Selected" style="margin-left: 10px;">@Model.WorkgroupAddress.AeLocationCode</span>
                    </div>
                </li>
            <li>
                <div class="editor-label">
                    @Html.LabelFor(model => model.WorkgroupAddress.Building) 
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.WorkgroupAddress.Building)
                    @Html.ValidationMessageFor(model => model.WorkgroupAddress.Building)
                </div>
            </li>
            <li>
                <div class="editor-label">
                    @Html.LabelFor(model => model.WorkgroupAddress.Room) 
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.WorkgroupAddress.Room)
                    @Html.ValidationMessageFor(model => model.WorkgroupAddress.Room)
                </div>
            </li>
            <li>
                <div class="editor-label required">
                    @Html.LabelFor(model => model.WorkgroupAddress.Address)<span>*</span> 
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.WorkgroupAddress.Address)
                    @Html.ValidationMessageFor(model => model.WorkgroupAddress.Address)
                </div>
            </li>
            <li>
                <div class="editor-label required">
                    @Html.LabelFor(model => model.WorkgroupAddress.City)<span>*</span> 
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.WorkgroupAddress.City)
                    @Html.ValidationMessageFor(model => model.WorkgroupAddress.City)
                </div>
            </li>
            <li>
                <div class="editor-label required">
                    @Html.LabelFor(model => model.WorkgroupAddress.State)<span>*</span> 
                </div>
                <div class="editor-field">
                    @Html.Select("WorkgroupAddress.State", o => o.Options(Model.States, a => a.Id, a => a.Name).FirstOption("--Select State--").Selected(Model.WorkgroupAddress != null && !string.IsNullOrEmpty(Model.WorkgroupAddress.State) ? Model.WorkgroupAddress.State : string.Empty))
                    @*@Html.EditorFor(model => model.WorkgroupAddress.State)*@
                    @Html.ValidationMessageFor(model => model.WorkgroupAddress.State)
                </div>
            </li>
            <li>
                <div class="editor-label required">
                    @Html.LabelFor(model => model.WorkgroupAddress.Zip)<span>*</span> 
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.WorkgroupAddress.Zip)
                    @Html.ValidationMessageFor(model => model.WorkgroupAddress.Zip)
                    <span style="font-style: italic; margin-left: 10px;">* When shipping to campus, use 95616-5270 for proper tax calculation.</span>
                </div>
            </li>
            <li>
                <div class="editor-label">
                    @Html.LabelFor(model => model.WorkgroupAddress.Phone) 
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.WorkgroupAddress.Phone)
                    @Html.ValidationMessageFor(model => model.WorkgroupAddress.Phone)
                </div>
            </li>
            @Html.HiddenFor(model => model.WorkgroupAddress.Id)
					
        </ul>

    </div>


</section>
    @await Html.PartialAsync("_Navigation")
}


