@using Purchasing.Core.Domain
@model OrderReceiveModel


@{
    ViewBag.Title = "Pay Invoice For Items";
    ViewBag.HideEditDialogue = true;
}


@section SubNav
{
    <ul class="navigation">
        <li><a href="@Url.Action("Review", new {id=Model.OrderId})" class="ui-button button ui-state-default">Back to Order</a></li>
    </ul>
}

@section AdditionalStyles
{
    @Styles.Render("~/Css/single/fileuploader/fileuploader")
    @Styles.Render("~/Css/single/receive-payment")
}

@section AdditionalScripts
{
    @Scripts.Render("~/bundles/jquery.tmpl")
    @Scripts.Render("~/bundles/fileuploader.js")

    <script type="text/javascript">

    $(function () {
        $("#RecordButton").click(function () {
            $(".receiveLineItem").each(function () {
                var receiveVal = $(this).val();
                var lineItemId = $(this).data("id");
                var initial = $("#original" + lineItemId).val();
                if (initial != receiveVal) {
                    if (!$.isNumeric(receiveVal)) {
                        alert("Must be a number");
                    } else {

                        var id = $("#id").val();
                        var antiforgery = $("input[name='__RequestVerificationToken']").val();
                        var url = '@Url.Action("PayInvoice")';
                        var loader = $("#" + lineItemId + " .quantity-loader");
                        var outstanding = $("#" + lineItemId + " .unaccounted");

                        $("#" + lineItemId + " .quantity-update-message").html("Updating...");
                        loader.show();
                        $.post(url, { id: id, lineItemId: lineItemId, receivedQuantity: receiveVal, __RequestVerificationToken: antiforgery }, function (result) {
                            loader.hide();
                            if (result) {
                                $("#" + lineItemId + " .receiveQuantity").html(result.receivedQuantityReturned);
                                if (result.success == true) {
                                    $("#" + lineItemId + " .quantity-update-message").html(result.message);
                                    $("#original" + lineItemId).val(receiveVal);
                                    outstanding.html(result.unaccounted);
                                    $("#" + lineItemId + " .user-name").html(result.lastUpdatedBy);
                                    $("#" + lineItemId + " .update-date").html("Just Now");
                                    if (result.showRed) {
                                        outstanding.removeClass("green");
                                        outstanding.addClass("red");
                                    } else {
                                        outstanding.removeClass("red");
                                        outstanding.addClass("green");
                                    }
                                } else {
                                    $("#" + lineItemId + " .quantity-update-message").html(result.message);
                                }
                            } else {
                                alert("There was a problem updating the received quantity.");
                            }

                        });
                    }
                }
            });

        });
        @*$(".receiveLineItem").change(function() {
            var receiveVal = $(this).val();

            if (!$.isNumeric(receiveVal)) {
                alert("Must be a number");
            } else {

                var lineItemId = $(this).data("id");
                var id = $("#id").val();
                var antiforgery = $("input[name='__RequestVerificationToken']").val();
                var url = '@Url.Action("ReceiveItems")';
                var loader = $("#" + lineItemId + " .quantity-loader");
                var outstanding = $("#" + lineItemId + " .unaccounted");
                var payInvoice = '@Model.PayInvoice';


                $("#" + lineItemId + " .quantity-update-message").html("Updating...");
                loader.show();
                $.post(url, { id: id, lineItemId: lineItemId, receivedQuantity: receiveVal, updateNote: false, payInvoice: payInvoice, __RequestVerificationToken: antiforgery }, function(result) {
                    loader.hide();
                    if (result) {
                        $("#" + lineItemId + " .receiveLineItem").val("");
                        $("#" + lineItemId + " .receiveQuantity").html(result.receivedQuantityReturned);
                        if (result.success == true) {
                            $("#" + lineItemId + " .quantity-update-message").html(result.message);
                            outstanding.html(result.unaccounted);
                            $("#" + lineItemId + " .user-name").html(result.lastUpdatedBy);
                            $("#" + lineItemId + " .update-date").html("Just Now");
                            if (result.showRed) {
                                outstanding.removeClass("green");
                                outstanding.addClass("red");
                            } else {
                                outstanding.removeClass("red");
                                outstanding.addClass("green");
                            }
                        } else {
                            $("#" + lineItemId + " .quantity-update-message").html(result.message);
                        }
                    } else {
                        alert("There was a problem updating the received quantity.");
                    }

                });
            }
        });*@

        $(".receiveNotes").change(function () {
            var id = $("#id").val();
            var notesVal = $(this).val();
            var lineItemId = $(this).data("id");
            var antiforgery = $("input[name='__RequestVerificationToken']").val();
            var url = '@Url.Action("PayInvoiceNote", new { id = Model.OrderId })';

            var updateMessage = $("#notesLineId" + lineItemId + " .notes-update-message");
            var loader = $("#notesLineId" + lineItemId + " .notes-loader");

            loader.show();
            updateMessage.html("Updating...");
            $.post(url, { id: id, lineItemId: lineItemId, note: notesVal, __RequestVerificationToken: antiforgery }, function (result) {
                loader.hide();
                if (result) {
                    if (result.success == true) {
                        $("#" + lineItemId + " .user-name").html(result.lastUpdatedBy);
                        $("#" + lineItemId + " .update-date").html("Just Now");
                        updateMessage.html(result.message);
                    } else {
                        updateMessage.html(result.message);
                    }
                } else {
                    alert("There was a problem updating the Notes.");
                }

            });
        });

        $(".toggle-line-item-details").click(function () {
            var data = $(this).data("id");
            var idToToggle = "#notesLineId" + data;
            $(idToToggle).toggle();
        });

    });


    $(function () {
        $(".userDetails").click(function () {
            var temp = $(this);
            var orderId = $("#id").val();
            var lineItemId = temp.data("id");
            var url = '@Url.Action("GetReceiveHistory")';
            var dialogList = $("#historyBody");


            dialogList.empty();
            $("#peepsDialog").dialog("open");
            $("#peepsLoaderId").show();
            $.getJSON(url, { id: orderId, lineItemId: lineItemId, payInvoice: true }, function (result) {
                $("#peepsLoaderId").hide();
                if (result == null || result.success == false) {
                    alert("There was a problem getting the list of users.");
                } else {

                    $(result.history).each(function () {
                        dialogList.append("<tr>" + "<td>" + this.FullName + "</td><td>" + this.updateDate + "</td><td>" + this.whatWasUpdated + "</td></tr>");
                    });
                }
            });
        });
    });

    $(function () {
        function attachFileEvents() {
            var uploader = new qq.FileUploader({
                // pass the dom node (ex. $(selector)[0] for jQuery users)
                element: document.getElementById('file-uploader'),
                // path to server-side upload script
                action: '@Url.Action("UploadFile", "Order", new {orderId = Model.OrderId})',
                fileTemplate: '<li>' +
                    '<span class="qq-upload-file"></span>' +
                    '<span class="qq-upload-spinner"></span>' +
                    '<span class="qq-upload-size"></span>' +
                    '<a class="qq-upload-cancel" href="#">Cancel</a>' +
                    '<span class="qq-upload-failed-text">Failed</span>' +
                    '<div class="ui-widget" style="display: inline-block"><select id="combobox" class="qq-upload-file-category jcs-combobox"><option value="">Select one...</option><option value="Order Confirmation">Order Confirmation</option><option value="Invoice">Invoice</option><option value="Shipping Notification">Shipping Notification</option><option value="Packing Slip">Packing Slip</option><option value="Licenses and Agreements">Licenses and Agreements</option><option value="Miscellaneous">Miscellaneous</option></select><div class="qq-upload-file-category-message" style="display: inline-block; margin-left: 33px;"></vid></div>' +
                    '</li>',
                sizeLimit: 4194304, //TODO: add configuration instead of hardcoding to 4MB
                onComplete: function (id, fileName, response) {
                    if (response.success) {
                        var newFileContainer = $(uploader._getItemByFileId(id));
                        var viewAttachmentUrl = options.ViewAttachment + "?fileId=" + response.id;
                        var fileDisplay = $("<a>").attr('href', viewAttachmentUrl).html(fileName);
                        newFileContainer.find(".qq-upload-file").empty().append(fileDisplay);
                        $(".attachments-not-found").empty();
                        newFileContainer.find(".qq-upload-file-category").attr("data-id", response.id);
                        $(".jcs-combobox").combobox();
                    } else {
                        alert("File upload failed. (Missing Extension?)");
                    }
                },
                debug: true
            });

            (function ($) {
                $.widget("ui.combobox", {
                    _create: function () {
                        var input,
                            self = this,
                            select = this.element.hide(),
                            selected = select.children(":selected"),
                            value = selected.val() ? selected.text() : "",
                            wrapper = this.wrapper = $("<span>")
                                .addClass("ui-combobox")
                                .insertAfter(select);

                        input = $("<input>")
                            .appendTo(wrapper)
                            .attr("title", "Select from the list or type your own description. <strong>Tab off to update.</strong>").qtip()
                            .val(value)
                        //.addClass("ui-state-default ui-combobox-input")
                            .addClass("ui-combobox-input qq-upload-file-category")
                            .autocomplete({
                                delay: 0,
                                minLength: 0,
                                source: function (request, response) {
                                    var matcher = new RegExp($.ui.autocomplete.escapeRegex(request.term), "i");
                                    response(select.children("option").map(function () {
                                        var text = $(this).text();
                                        if (this.value && (!request.term || matcher.test(text)))
                                            return {
                                                label: text.replace(
                                                    new RegExp(
                                                        "(?![^&;]+;)(?!<[^<>]*)(" +
                                                            $.ui.autocomplete.escapeRegex(request.term) +
                                                                ")(?![^<>]*>)(?![^&;]+;)", "gi"
                                                    ), "<strong>$1</strong>"),
                                                value: text,
                                                option: this
                                            };
                                    }));
                                },

                                change: function (event, ui) {
                                    if (!ui.item) {
                                        var matcher = new RegExp("^" + $.ui.autocomplete.escapeRegex($(this).val()) + "$", "i"),
                                            valid = false;
                                        select.children("option").each(function () {
                                            if ($(this).text().match(matcher)) {
                                                this.selected = valid = true;
                                                return false;
                                            }
                                        });


                                    }
                                    var fileContainer = $(this).parent().parent();
                                    var categeoryText = $(this).val();
                                    var attachmentGuid = fileContainer.find("#combobox").data("id");
                                    var categoryMessage = fileContainer.find(".qq-upload-file-category-message");

                                    categoryMessage.html("Updating...");

                                    $.post('@Url.Action("UpdateAttachmentCategory", new {id = Model.OrderId})', { guidId: attachmentGuid, category: categeoryText, __RequestVerificationToken: $('#forgery-token > input[name="__RequestVerificationToken"]').val() }, function (result) {
                                        if (result) {
                                            categoryMessage.html(result.message);
                                        } else {
                                            alert("There was a problem updating the Attachment's Category");
                                        }

                                    });
                                }
                            })
                            .addClass("ui-widget ui-widget-content ui-corner-left");

                        input.data("autocomplete")._renderItem = function (ul, item) {
                            return $("<li></li>")
                                .data("item.autocomplete", item)
                                .append("<a>" + item.label + "</a>")
                                .appendTo(ul);
                        };

                        $("<a>")
                            .attr("tabIndex", -1)
                            .attr("title", "Show All Items")
                            .appendTo(wrapper)
                            .button({
                                icons: {
                                    primary: "ui-icon-triangle-1-s"
                                },
                                text: false
                            })
                            .removeClass("ui-corner-all")
                            .addClass("ui-corner-right ui-combobox-toggle")
                            .click(function () {
                                // close if already visible
                                if (input.autocomplete("widget").is(":visible")) {
                                    input.autocomplete("close");
                                    return;
                                }

                                // work around a bug (likely same cause as #5265)
                                $(this).blur();

                                // pass empty string as value to search for, displaying all results
                                input.autocomplete("search", "");
                                input.focus();
                            });
                    },

                    destroy: function () {
                        this.wrapper.remove();
                        this.element.show();
                        $.Widget.prototype.destroy.call(this);
                    }
                });
            })(jQuery);

            $(function () {
                $(".jcs-combobox").combobox();
                $("#toggle").click(function () {
                    $(this).toggle();
                });
            });
        }

        attachFileEvents();
    });

    $(function () {
        $("#add-note").click(function () {
            $("#notes-dialog").dialog({
                modal: true,
                autoOpen: true,
                width: 400,
                buttons: {
                    "Confirm": function () {

                        var note = $("#notes-box").val();
                        $("#notes-box").val("");

                        var url = "@Url.Action("AddComment", "Order", new {id = Model.OrderId})";

                        var orderid = $("#id").val();
                        var antiforgery = $('#forgery-token > input[name="__RequestVerificationToken"]').val();


                        $.post(url, { id: orderid, comment: note, __RequestVerificationToken: antiforgery },
                            function (result) {

                                if (result == false) {
                                    alert("There was a problem adding the comment.");
                                } else {
                                    var comment = [{ datetime: result.Date, txt: result.Text, user: result.User }];
                                    $.tmpl($("#comment-template"), comment).appendTo("#notes table tbody");
                                    $(".notes-not-found").empty();
                                }

                            }
                        );

                        $(this).dialog("close");
                    },
                    "Cancel": function () { $(this).dialog("close"); }
                }
            });

            $("#add-note").click(function () {
                $("#notes-dialog").dialog("open");
                return false;
            });
        });
    });


    </script>



    <script type="text/javascript">
        $(document).ready(function() {
            $("#peepsDialog").dialog({
                autoOpen: false,
                height: 610,
                width: 500,
                modal: true,
                buttons: {
                    "Cancel": function() {
                        $("#peepsUl").empty();
                        $("#peepsLoaderId").hide();
                        $(this).dialog("close");
                    }
                }
            });

            $(".showTip").qtip({
                overwrite: false,
                show: {
                    event: 'mouseenter focus',
                    ready: false
                },
                hide: {
                    event: 'mouseleave blur'
                },
                position: {
                    my: 'bottom center',
                    at: 'top center'
                }
            });
        });

    </script>
}

@helper UnaccountedAmount(decimal total, decimal? received)
{
    var rtValue = string.Format("<td ");
    if (received != null)
    {
        var diff = total - received;
        if (diff > 0)
        {
            rtValue = string.Format("{0} class='unaccounted red bold'>({1})</td>", rtValue, string.Format("{0:0.###}", diff));
        }
        else
        {
            rtValue = string.Format("{0} class='unaccounted green bold'>{1}</td>", rtValue, string.Format("{0:0.###}", diff * -1));
        }
    }
    else
    {
        rtValue = string.Format("{0} class='unaccounted red bold'>({1})</td>", rtValue, string.Format("{0:0.###}", total));
    }
    @Html.Raw(rtValue)
}



@Html.Partial("_ReviewOrderDetails", Model.ReviewOrderViewModel)


<section id="line-items" class="ui-corner-all display-form">

    <header class="ui-corner-top ui-widget-header">Line Items</header>
    @if (Model.ReviewOrderViewModel.Order.ApUser != null)
    {
        <div class="section-text">
            <p>Note! This order has been assigned to <strong>@Model.ReviewOrderViewModel.Order.ApUser.FullName</strong> for Accounts Payable. Only they will be able to edit these values.</p>
        </div>
    }

    <div class="section-contents">

        @Html.Hidden("id", Model.OrderId)
       
        @{
            var disabled = string.Empty;
            if (Model.Locked == true)
            {
                disabled = "disabled='disabled'";
            }
        }

        @using (Html.BeginForm("PayAll", "Order", new { id = Model.OrderId }, FormMethod.Post))
        {
           @Html.Hidden("id", Model.OrderId)
            <div id="forgery-token">
                @Html.AntiForgeryToken()
            </div>
            <ul>

                <li class="apply">
                    <label>&nbsp;</label>
                    <input class="button" type="submit" value="Pay All" @disabled />
                </li>
            </ul>
        }

        <table class="no-icon-table">
            <thead>
                <tr>
                    <th></th>
                    <th>Pay Qty</th>
                    <th>Ordered Qty</th>
                    <th>Outstanding Qty</th>
                    <th>Unit</th>
                    <th>Catalog #</th>
                    <th>Description</th>
                    <th>Commodity</th>
                    <th>Unit $</th>
                    <th>Updated By</th>
                    <th></th>
                    <th>Updated</th>
                    <th>More</th>
                </tr>
            </thead>
            <tbody>
                @{
                    var odd = false;
                    var notesLineId = "";
                    var displayNotes = "";
                    var by = new HistoryReceivedLineItem();
                    var count = 0;
                }
                @foreach (var item in Model.LineItems.Where(a => a.Quantity != 0))
                {
                    count++;
                    notesLineId = "notesLineId" + item.Id;

                    displayNotes = (string.IsNullOrWhiteSpace(item.PaidNotes)) ? "display: none;" : string.Empty;

                    if (!Model.LastChangedBy.TryGetValue(item.Id, out by))
                    {
                        by = null;
                    }
                    var quantityPaid = item.QuantityPaid != null ? item.QuantityPaid : 0;
                    
                    <tr id="@item.Id" class="@(odd ? "odd" : "even")">
                        <td class="lineitem">@count</td>
                        <td class="receiveLineItemCell">
                            <input class="receiveLineItem showTip" type="number" data-id="@item.Id" title="Number of Units paid for this line item. Amount will be added to the current number of paid items." @disabled value="@quantityPaid" />
                            <input type="hidden" id="@string.Format("original{0}", item.Id)" data-id="@item.Id" value="@(item.QuantityReceived!=null ? item.QuantityReceived : 0)" />
                            <span class="quantity-loader" style="display: none;">
                                <img src='@Url.Image("ajax-loader.gif")' />
                            </span>
                        </td>
                        <td>@string.Format("{0:0.###}", item.Quantity)</td>
                        @UnaccountedAmount(item.Quantity, item.QuantityPaid )
                        <td>@item.Unit</td>
                        <td>@(string.IsNullOrWhiteSpace(item.CatalogNumber) ? "n/a" : item.CatalogNumber)</td>
                        <td>@item.Description</td>
                        <td>@(item.Commodity != null ? item.Commodity.Name : "n/a")</td>
                        <td>@item.UnitPrice</td>
                        <td class="user-name">@(by != null ? by.User.FullName : string.Empty)</td>
                        <td>
                            <a class='userDetails showTip ui-icon ui-icon-person' data-id='@item.Id' title='Lookup all the people who have updated this line item.'></a>
                        </td>
                        <td class="update-date">@(by != null ? by.UpdateDate.ToString("MM/dd/yyyy") : string.Empty)</td>
                        <td>
                            <span data-id="@item.Id" class="toggle-line-item-details ui-state-default ui-corner-all ui-state-hover" style="margin: 0px .1em; float: right;">
                                <a class=" ui-icon ui-icon-comment showTip" title="Show/Hide Pay Invoice Comments"></a>
                            </span>
                        </td>
                    </tr>
                    <tr id="@notesLineId" class="@(odd ? "odd" : "even")" style="@displayNotes">
                        <td colspan="13">
                            <table class="sub-line-item">
                                <th></th>
                                <tr>
                                    <td class="label">Notes:</td>
                                    <td>
                                        <textarea class="receiveNotes showTip" data-id="@item.Id" title="<strong>Tip:</strong> Don't put things like serial numbers in here because this can be edited. <br/>Information like that should be added to the comments/notes of the review page." @disabled >@item.PaidNotes</textarea>
                                    </td>
                                    <td>
                                        <span class="notes-loader" style="display: none;">
                                            <img src='@Url.Image("ajax-loader.gif")' />
                                        </span>
                                        <span class="notes-update-message"></span>
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                    odd = !odd;
                }
            </tbody>
        </table>
        <ul>
            <li class="apply">
                <label>&nbsp;</label>
                <input class="button" id="RecordButton" type="button" value="Record Items" />
            </li>
        </ul>
    </div>


</section>

@Html.Partial("_ReceivedItemsHistoryDialog")

@Html.Partial("_ReviewAttachments", Model.ReviewOrderViewModel)

@Html.Partial("_ReviewNotes", Model.ReviewOrderViewModel)