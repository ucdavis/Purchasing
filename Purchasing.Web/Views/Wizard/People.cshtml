@using Purchasing.Core.Domain
@using Purchasing.Web.Models
@model WorgroupPeopleListModel

@{
	ViewBag.Title = Model.Workgroup.Name;
	ViewBag.StepName = "Confirm " + Model.CurrentRole.Name + "s";
	ViewBag.ListPage = true;
	switch ((int)ViewBag.StepNumber)
	{
		case 3:
			//On Requestor
			ViewBag.Previous = Url.Action("AddPeople", "Wizard", new { id = Model.Workgroup.Id, roleFilter = "RQ" });
			ViewBag.Next = Url.Action("AddPeople", "Wizard", new { id = Model.Workgroup.Id, roleFilter = "AP" });
			break;
		case 4:
			// On Approver
			ViewBag.Previous = Url.Action("AddPeople", "Wizard", new { id = Model.Workgroup.Id, roleFilter = "AP" });
			ViewBag.Next = Url.Action("AddPeople", "Wizard", new { id = Model.Workgroup.Id, roleFilter = "AM" });
			break;
		case 5:
			//On Account Manager
			ViewBag.Previous = Url.Action("AddPeople", "Wizard", new { id = Model.Workgroup.Id, roleFilter = "AM" });
			ViewBag.Next = Url.Action("AddPeople", "Wizard", new { id = Model.Workgroup.Id, roleFilter = "PR" });
			break;
		case 6:
			//On Purchaser
			ViewBag.Previous = Url.Action("AddPeople", "Wizard", new { id = Model.Workgroup.Id, roleFilter = "PR" });
            ViewBag.Next = Url.Action("AddPeople", "Wizard", new { id = Model.Workgroup.Id, roleFilter = "RV" });
			break;
        case 7:
            //On Reviewer
            ViewBag.Previous = Url.Action("AddPeople", "Wizard", new { id = Model.Workgroup.Id, roleFilter = "RV" });
            ViewBag.Next = Url.Action("AddAccounts", "Wizard", new { id = Model.Workgroup.Id });
            break;
	}
    ViewBag.IsAdministrative = Model.Workgroup.Administrative;
    ViewBag.IsAccountSync = Model.Workgroup.SyncAccounts;
    if(ViewBag.IsAdministrative && (int)ViewBag.StepNumber == 7)
    {
        ViewBag.LastStep = true;
    }
}


	@Html.Partial("_StatusBar", Model.Workgroup.Id) 
	@Html.Partial("_Navigation")
    

    @{
        var helpText = "";
        switch ((int)ViewBag.StepNumber)
        {
            case 3:
                //On Requestor
                helpText = "<strong>Requestors</strong> are users who can place orders. Typically lab members or general staff who may initiate orders.</br>";
                break;
            case 4:
                // On Approver
                helpText = "<strong>Approvers</strong> are users who review and approve orders from requestors. Approvers must be added as requestors in order to submit orders. Approvers are typically the PI, supervisor of units, or their delegates.</br>";
                break;
            case 5:
                //On Account Manager
                helpText = "<strong>Account Managers</strong> are users who review orders following approval step. Typically admin staff or shared service unit budget personnel.</br>";
                break;
            case 6:
                //On Purchaser
                helpText = "<strong>Purchasers</strong> are user who completes order and files order with vendor or campus purchasing. Typically admin staff or shared service unit purchasing personnel.</br>";
                break;
            case 7:
                //On Reviewer
                helpText = "<strong>Reviewers</strong> are user who can view any order in the workgroup.</br>";
                break;
        }
        helpText = helpText + "</br>You must add at least one requestor, approver, account manager, and purchaser for the workgroup to be fully functional.</br>" +
                                "Use the \"Prev\" or \"add another...\" links to add additional users for this category.</br>" +
                                "Using the wizard, you can only users. If you need to remove them, please use the the admin: workgroup page.";
        }

<nav class="col2">
    <ul class='navigation'>
        <li>
            <a href="#" id="help-people-page" class="ui-icon ui-icon-help showTip" style="margin-bottom: -6px;" title="@helpText"></a>
        </li>
        <li>@Html.ActionLink("Add another " + Model.Roles.Where(a => a.Id == ViewBag.rolefilter).FirstOrDefault().Name, "AddPeople", new { id = Model.Workgroup.Id, roleFilter = ViewBag.rolefilter }, new { @class = "button" })</li>       
    </ul>
</nav>

@section AdditionalScripts
{

	<script type="text/javascript">

		$(function () {

		   $(".away-btn").click(function () {

				var that = this;

				$("#away-dialog").find("#name").html($(this).data("name"));
				$("#away-dialog").find("#awayUntil").val("");

				$("#away-dialog").dialog({ modal: true, buttons: {

					Confirm: function () {

						var userId = $(that).data("userid");
						var awayUntil = $(this).find("#awayUntil").val();
						var token = $("input[name='__RequestVerificationToken']").val();

						var url = '@Url.Action("SetAwayStatus", "User")';

						$.post(url, { userId: userId, awayUntil: awayUntil, __RequestVerificationToken: token }, function (result) {


							if (result != null) {

								var row = $(that).parents("tr");
								var status = $(row).find(".away-status");
								var date = $(row).find(".away-date");

								if (result) {

									status.find("span").html("Away").removeClass("table-bool-good").addClass("table-bool-bad");
									date.html(awayUntil);

								}
								else {

									status.find("span").html("Available").removeClass("table-bool-bad").addClass("table-bool-good");
									date.html("");

								}

							}
						});

						$(this).dialog("close");

					},
					Cancel: function () { $(this).dialog("close"); }

				}
				});

			});

		});

	</script>

	<style type="text/css">
		.away-btn { cursor: pointer; }
	</style>

}





@Html.AntiForgeryToken()
@Html.Partial("_PeopleTable", Model.UserRoles)

<div id="away-dialog" title="Set Away Status" style="display:none;">

	<ul>
		<li><label>Name</label>
			<div class="display-details" id="name"></div>
		</li>
		<li><label>Until Date</label>
			<div class="display-details"><input type="datetime" id="awayUntil"/></div>
		</li>
	</ul>
	
</div>
@Html.Partial("_Navigation")