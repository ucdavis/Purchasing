@model Purchasing.Web.Models.WorkgroupAddressViewModel

@{
    ViewBag.Title = Model.Workgroup.Name;
    ViewBag.StepName = "Add Shipping Addresses";
    ViewBag.Previous = Url.Action("Vendors", "Wizard", new { id = Model.Workgroup.Id });
    ViewBag.Skip = Url.Action("Addresses", "Wizard", new { id = Model.Workgroup.Id});
    ViewBag.IsAdministrative = Model.Workgroup.Administrative;
    ViewBag.IsAccountSync = Model.Workgroup.SyncAccounts;
}

@section AdditionalScripts
{

	<script type="text/javascript">

	    var url = '@Url.Action("SearchBuilding", "Ajax")';

	    $(function () {

	        $("#WorkgroupAddress_Building").autocomplete({
	            source: url,
	            minLength: 2,
	            select: function (event, ui) {

	                $("#WorkgroupAddress_BuildingCode").val(ui.item.id);
	                $("#building-code-display").html("Building Code: " + ui.item.id);
	                $("#building-code-display").removeClass("red");
	                $("#building-code-display").addClass("green");

	            },
	            change: function (event, ui) {

	                if (ui.item == null) {
	                    $("#WorkgroupAddress_BuildingCode").val("");
	                    $("#building-code-display").html("Warning Not a Valid Building");
	                    $("#building-code-display").removeClass("green");
	                    $("#building-code-display").addClass("red");
	                } else {
	                    $("#building-code-display").html("Building Code: " + ui.item.id);
	                    $("#building-code-display").removeClass("red");
	                    $("#building-code-display").addClass("green");
	                }
	            }
	        });

	    });

	</script>

}




@Html.Partial("_StatusBar", Model.Workgroup.Id) 
     
     @{
         var helpText = "To add a shipping enter the fields below.</br></br>When an order is placed, only the name will be displayed to the requester.";
     }


@using (Html.BeginForm()) {
	@Html.AntiForgeryToken()
	@Html.ValidationSummary(true)
    @Html.Partial("_Navigation")
<section class="ui-corner-all">
@* Legend is required if you have more than one widget/unit to help the user understand what is being asked of them.
Example: Dinosaur 1  *@
	<header class="ui-corner-top ui-widget-header">Workgroup Address <a href="#" id="help-address-page" class="ui-icon ui-icon-help showTip" title="@helpText" ></a></header>
    
        <div class="section-text">

            @*<h4>Form Header</h4>*@
            @*<p>Be specific so the user understands what exactly you are looking for.  Example: After Dinosaur 1 moves out of his/her parents' den what will Dinosaur 1 do?  We need to know his employment plan, feeding area, as well as living situation.  This information will not be sold or given to carnivores.</p>*@
            <p>All required fields are in <strong>bold</strong> and have a red <span class="required">*</span> next to the field label.</p>

        </div>
    <div class="section-contents">
     


        <ul>
            <li>
                <div class="editor-label required">
                    @Html.LabelFor(model => model.WorkgroupAddress.Name)<span>*</span> 
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.WorkgroupAddress.Name)
                    @Html.ValidationMessageFor(model => model.WorkgroupAddress.Name)
                </div>
            </li>
            <li>
                <div class="editor-label">
                    @Html.LabelFor(model => model.WorkgroupAddress.Building) 
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.WorkgroupAddress.Building)
                    @Html.Hidden("WorkgroupAddress.BuildingCode", Model.WorkgroupAddress.BuildingCode != null ? Model.WorkgroupAddress.BuildingCode.Id : string.Empty)
                    @Html.ValidationMessageFor(model => model.WorkgroupAddress.Building)
                </div>
            </li>
                <li>
                    <div style="margin-left: 126px;">
                        @if (Model.WorkgroupAddress.BuildingCode != null)
                        {
                            <span id="building-code-display" class="display-details green">@Html.Encode("Building Code: " + Model.WorkgroupAddress.BuildingCode.Id)</span>
                        }
                        else
                        {
                            <span id="building-code-display" class="display-details red">Warning Not a Valid Building</span>
                        }
                    </div>
                </li>
            <li>
                <div class="editor-label">
                    @Html.LabelFor(model => model.WorkgroupAddress.Room) 
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.WorkgroupAddress.Room)
                    @Html.ValidationMessageFor(model => model.WorkgroupAddress.Room)
                </div>
            </li>
            <li>
                <div class="editor-label required">
                    @Html.LabelFor(model => model.WorkgroupAddress.Address)<span>*</span> 
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.WorkgroupAddress.Address)
                    @Html.ValidationMessageFor(model => model.WorkgroupAddress.Address)
                </div>
            </li>
            <li>
                <div class="editor-label required">
                    @Html.LabelFor(model => model.WorkgroupAddress.City)<span>*</span> 
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.WorkgroupAddress.City)
                    @Html.ValidationMessageFor(model => model.WorkgroupAddress.City)
                </div>
            </li>
            <li>
                <div class="editor-label required">
                    @Html.LabelFor(model => model.WorkgroupAddress.State)<span>*</span> 
                </div>
                <div class="editor-field">
                    @this.Select("WorkgroupAddress.State").Options(Model.States, a => a.Id, a => a.Name).FirstOption("--Select State--").Selected(Model.WorkgroupAddress != null && !string.IsNullOrEmpty(Model.WorkgroupAddress.State) ? Model.WorkgroupAddress.State : string.Empty)
                    @*@Html.EditorFor(model => model.WorkgroupAddress.State)*@
                    @Html.ValidationMessageFor(model => model.WorkgroupAddress.State)
                </div>
            </li>
            <li>
                <div class="editor-label required">
                    @Html.LabelFor(model => model.WorkgroupAddress.Zip)<span>*</span> 
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.WorkgroupAddress.Zip)
                    @Html.ValidationMessageFor(model => model.WorkgroupAddress.Zip)
                    <span style="font-style: italic; margin-left: 10px;">* When shipping to campus, use 95616-5270 for proper tax calculation.</span>
                </div>
            </li>
            <li>
                <div class="editor-label">
                    @Html.LabelFor(model => model.WorkgroupAddress.Phone) 
                </div>
                <div class="editor-field">
                    @Html.EditorFor(model => model.WorkgroupAddress.Phone)
                    @Html.ValidationMessageFor(model => model.WorkgroupAddress.Phone)
                </div>
            </li>
            @Html.HiddenFor(model => model.WorkgroupAddress.Id)
					
        </ul>

    </div>


</section>
    @Html.Partial("_Navigation")
}


