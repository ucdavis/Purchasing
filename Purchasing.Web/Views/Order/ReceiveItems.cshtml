@using Purchasing.Core.Domain
@model OrderReceiveModel


@{
    ViewBag.Title = Model.PayInvoice ? "Pay Invoice For Items" : "Receive Items";
    ViewBag.HideEditDialogue = true;
}

@section SubNav
{
    <ul class="navigation">
        <li><a href="@Url.Action("Review", new {id=Model.OrderId})" class="ui-button button ui-state-default">Back to Order</a></li>
    </ul>
}

@section AdditionalScripts
{
    <style type="text/css">
        .navigation li{ display:inline-block; width:auto; padding:0 0 0 10px;}
        #orn {margin: 1em 0;}
        #orn ul {padding: 0;}
        #orn li {margin: 0;}
        #order-details .col1, #order-details .col2, #kfs-section .col1, #kfs-section .col2 {width: 49.25%; vertical-align: top; text-align: left; display:inline-block;}
        #kfs-section .col1 {margin-top:36px; padding-left:30px; width:46%;}
        #order-details .col1 .display-form, #order-details .col2 .display-form {height: 140px; margin-bottom: 0;}
        #order-details .col1 ul {padding:50px 0 0 30px;}
        #order-details .col1 ul span, #accounts .acct-info span, #order-details .col1 ul strong, #accounts .acct-info strong, #kfs .col1 ul span  {display:inline-block; vertical-align:top;}
        #order-details .col1 ul span, #kfs .col1 ul span, #kfs .col2 ul span {width:150px;}
        #accounts .acct-info span  {width:auto; min-width:650px;}
        #order-details .col1 ul strong {width:250px;}
        #accounts .acct-info strong  {width:150px;}
        
        #order-details .col2 section#vendor {margin-bottom:20px;}
        
        .item-footer {background-color:#FFF; color: #000; }
        .item-footer .label {text-align: right;}
        
        .extra-info .line-url, .extra-info .line-notes {display:inline-block; width: 49%; text-align: left;}
        .extra-info .line-url {margin-right: 10px;}
        
        .row-even {background-color:#EEEEEE;}
        .row-odd {}
        .row-split {width: 400px; border: 1px solid lightgray; background-color: lightgreen;}
        .row-split-prob {background-color: lightcoral;}
        .row-split table {border: none;}
        .row-total-value, .row-total-grandtotal {font-weight:bold;}
        .row-total-label, .row-total-value {background-color:#014A81; color:#FFFFFF;}
        #history table, #notes table, #approvals table { border: none; }
        #history table tr, #notes table tr, #approvals table tr {border-bottom: 1px solid lightgray;}
        #history table tr > td:first-child, #notes table tr > td:first-child, #approvals table tr > td:first-child { width: 150px;}
        #history table tr > td:last-child, #notes table tr > td:last-child #approvals table tr > td:last-child { width: 150px;}
        
        .acct-info .account, .acct-info .subaccount, .acct-info .project {margin-right: 20px;}
        
        .approval-complete { background-color: #dafcc9;}
        
        .row-bottom {border-bottom:1px solid #666;}
        
        form section ul, .display-form ul {padding:0;}
        #accounts .section-contents, #attachments .section-contents, #notes .section-contents, .vcard {font-size:1.2em; line-height:1.5em;}

       .even:hover, .odd:hover {box-shadow: 0 1px 5px #BBBBBB; border: 1px solid #fff; background-color: transparent;} 
       
       .section-contents .no-icon-table tr .receiveLineItemCell {width: 150px;}
       .section-contents .no-icon-table tr .receiveLineItem { width: 140px;}
    </style>
    
    


    <script type="text/javascript">

        $(function () {
            $(".receiveLineItem").change(function () {
                var receiveVal = $(this).val();

                if (!$.isNumeric(receiveVal)) {
                    alert("Must be a number");
                } else {

                    var lineItemId = $(this).data("id");
                    var id = $("#id").val();
                    var antiforgery = $("input[name='__RequestVerificationToken']").val();
                    var url = '@Url.Action("ReceiveItems")';
                    var loader = $("#" + lineItemId + " .quantity-loader");
                    var outstanding = $("#" + lineItemId + " .unaccounted");
                    var payInvoice = '@Model.PayInvoice';


                    $("#" + lineItemId + " .quantity-update-message").html("Updating...");
                    loader.show();
                    $.post(url, { id: id, lineItemId: lineItemId, receivedQuantity: receiveVal, updateNote: false, payInvoice: payInvoice, __RequestVerificationToken: antiforgery }, function (result) {
                        loader.hide();
                        if (result) {
                            $("#" + lineItemId + " .receiveLineItem").val("");
                            $("#" + lineItemId + " .receiveQuantity").html(result.receivedQuantityReturned);
                            if (result.success == true) {
                                $("#" + lineItemId + " .quantity-update-message").html(result.message);
                                outstanding.html(result.unaccounted);
                                $("#" + lineItemId + " .user-name").html(result.lastUpdatedBy);
                                $("#" + lineItemId + " .update-date").html("Just Now");
                                if (result.showRed) {
                                    outstanding.removeClass("green");
                                    outstanding.addClass("red");
                                } else {
                                    outstanding.removeClass("red");
                                    outstanding.addClass("green");
                                }
                            } else {
                                $("#" + lineItemId + " .quantity-update-message").html(result.message);
                            }
                        } else {
                            alert("There was a problem updating the received quantity.");
                        }

                    });
                }
            });

            $(".receiveNotes").change(function () {
                var id = $("#id").val();
                var notesVal = $(this).val();
                var lineItemId = $(this).data("id");
                var antiforgery = $("input[name='__RequestVerificationToken']").val();
                var url = '@Url.Action("ReceiveItems")';

                var updateMessage = $("#notesLineId" + lineItemId + " .notes-update-message");
                var loader = $("#notesLineId" + lineItemId + " .notes-loader");

                var payInvoice = '@Model.PayInvoice';

                loader.show();
                updateMessage.html("Updating...");
                $.post(url, { id: id, lineItemId: lineItemId, note: notesVal, updateNote: true, payInvoice: payInvoice, __RequestVerificationToken: antiforgery }, function (result) {
                    loader.hide();
                    if (result) {
                        if (result.success == true) {
                            $("#" + lineItemId + " .user-name").html(result.lastUpdatedBy);
                            $("#" + lineItemId + " .update-date").html("Just Now");
                            updateMessage.html(result.message);
                        } else {
                            updateMessage.html(result.message);
                        }
                    } else {
                        alert("There was a problem updating the Notes.");
                    }

                });
            });

            $(".toggle-line-item-details").click(function () {
                var data = $(this).data("id");
                var idToToggle = "#notesLineId" + data;
                $(idToToggle).toggle();
            });

        });


        $(function () {
            $(".userDetails").click(function () {
                var temp = $(this);
                var orderId = $("#id").val();
                var lineItemId = temp.data("id");
                var url = '@Url.Action("GetReceiveHistory")';
                var dialogList = $("#historyBody");

                var payInvoice = '@Model.PayInvoice';

                dialogList.empty();
                $("#peepsDialog").dialog("open");
                $("#peepsLoaderId").show();
                $.getJSON(url, { id: orderId, lineItemId: lineItemId, payInvoice: payInvoice }, function (result) {
                    $("#peepsLoaderId").hide();
                    if (result == null || result.success == false) {
                        alert("There was a problem getting the list of users.");
                    } else {

                        $(result.history).each(function () {
                            dialogList.append("<tr>" + "<td>" + this.FullName + "</td><td>" + this.updateDate + "</td><td>" + this.whatWasUpdated + "</td></tr>");
                        });
                    }
                });
            });
        });


    </script>

    
    <script type="text/javascript">
        $(document).ready(function () {
            $("#peepsDialog").dialog({
                autoOpen: false,
                height: 610,
                width: 500,
                modal: true,
                buttons: {
                    "Cancel": function () {
                        $("#peepsUl").empty();
                        $("#peepsLoaderId").hide();
                        $(this).dialog("close");
                    }
                }
            });

            $(".showTip").qtip({
                overwrite: false,
                show: {
                    event: 'mouseenter focus',
                    ready: false
                },
                hide: {
                    event: 'mouseleave blur'
                },
                position: {
                    my: 'bottom center',
                    at: 'top center'
                }
            });
        });

    </script>
}

@helper UnaccountedAmount (decimal total, decimal? received)
{
    var rtValue = string.Format("<td ");
    if(received != null)
    {
        var diff = total - received;
        if (diff > 0)
        {
            rtValue = string.Format("{0} class='unaccounted red bold'>({1})</td>", rtValue, string.Format("{0:0.###}", diff));
        }
        else
        {
            rtValue = string.Format("{0} class='unaccounted green bold'>{1}</td>", rtValue, string.Format("{0:0.###}", diff * -1));
        }
    }
    else
    {
        rtValue = string.Format("{0} class='unaccounted red bold'>({1})</td>", rtValue, string.Format("{0:0.###}", total));
    }
    @Html.Raw(rtValue)
}



@Html.Partial("_ReviewOrderDetails", Model.ReviewOrderViewModel)


<section id="line-items" class="ui-corner-all display-form">

    <header class="ui-corner-top ui-widget-header">Line Items</header>

    <div class="section-contents">

        @Html.Hidden("id", Model.OrderId)
        @Html.AntiForgeryToken()
        @{
            var headerName = Model.PayInvoice ? "Pay Qty" : "Receive Qty";
        }

        <table class="no-icon-table">
            <thead>
                <tr>
                    <th></th>
                    <th>@headerName</th>
                    <th>Ordered Qty</th>
                    <th>Outstanding Qty</th>
                    <th>Unit</th>
                    <th>Catalog #</th>
                    <th>Description</th>
                    <th>Commodity</th>
                    <th>Unit $</th>
                    <th>Updated By</th>
                    <th></th>
                    <th>Updated</th>
                    <th>More</th>
                </tr>
            </thead>
            <tbody>
                @{
                    var odd = false;
                    var notesLineId = "";
                    var displayNotes = "";
                    var by = new HistoryReceivedLineItem();
                    var count = 0;
                }
                @foreach(var item in Model.LineItems.Where(a => a.Quantity != 0))
                {
                    count++;
                    notesLineId = "notesLineId" + item.Id;

                    displayNotes = (Model.PayInvoice && string.IsNullOrWhiteSpace(item.PaidNotes)) || (Model.PayInvoice == false && string.IsNullOrWhiteSpace(item.ReceivedNotes)) ? "display: none;" : string.Empty;               

                    if (!Model.LastChangedBy.TryGetValue(item.Id, out by))
                    {
                        by = null;
                    }
                    var titleName = Model.PayInvoice ? "Number of Units paid for this line item. Amount will be added to the current number of paid items." : "Number of Units received for this line item. Amount will be added to the current number of received items.";
                    var notes = Model.PayInvoice == true ? item.PaidNotes : item.ReceivedNotes;
                    var toggleTittle = Model.PayInvoice ? "Show/Hide Pay Invoice Comments" : "Show/Hide Received Comments";
                    
                    <tr id="@item.Id" class="@(odd ? "odd" : "even")">
                        <td class="lineitem">@count</td>               
                        <td class="receiveLineItemCell">
                            <input class="receiveLineItem showTip" data-id="@item.Id" title="@titleName" />
                            <div class="receiveQuantity">@string.Format("{0:0.###}", Model.PayInvoice ? item.QuantityPaid: item.QuantityReceived)</div>
                            <span class="quantity-loader" style="display: none;">
                                <img src='@Url.Image("ajax-loader.gif")'/>
                            </span>
                            <span class="quantity-update-message"></span>
                        </td>
                        <td>@string.Format("{0:0.###}", item.Quantity)</td>
                        @UnaccountedAmount(item.Quantity, Model.PayInvoice? item.QuantityPaid : item.QuantityReceived)
                        <td>@item.Unit</td>
                        <td>@(string.IsNullOrWhiteSpace(item.CatalogNumber) ? "n/a" : item.CatalogNumber)</td>
                        <td>@item.Description</td>
                        <td>@(item.Commodity != null ? item.Commodity.Name : "n/a")</td>
                        <td>@item.UnitPrice</td>
                        <td class="user-name">@(by != null ? by.User.FullName : string.Empty)</td>
                        <td>
                            <a class='userDetails showTip ui-icon ui-icon-person' data-id='@item.Id' title='Lookup all the people who have updated this line item.'></a>
                        </td>
                        <td class="update-date">@(by != null ? by.UpdateDate.ToString("MM/dd/yyyy") : string.Empty)</td>
                        <td>
                            <span data-id="@item.Id" class="toggle-line-item-details ui-state-default ui-corner-all ui-state-hover" style="margin:0px .1em; float: right;">
                                <a class=" ui-icon ui-icon-comment showTip" title="@toggleTittle"></a>
                            </span>
                        </td>
                    </tr>
                    <tr id="@notesLineId" class="@(odd ? "odd":"even")" style="@displayNotes">
                        <td colspan="13">
                            <table class="sub-line-item">
                                <th></th>                           
                                <tr>
                                    <td class="label">Notes:</td>
                                    <td>
                                        <textarea class="receiveNotes showTip" data-id="@item.Id" title="<strong>Tip:</strong> Don't put things like serial numbers in here because this can be edited. <br/>Information like that should be added to the comments/notes of the review page." >@notes</textarea>
                                    </td>
                                    <td>
                                        <span class="notes-loader" style="display: none;">
                                            <img src='@Url.Image("ajax-loader.gif")'/>
                                        </span>
                                        <span class="notes-update-message"></span>
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                    odd = !odd;
                }
            </tbody>
        </table>

    </div>


</section>

@Html.Partial("_ReceivedItemsHistoryDialog")