@using Purchasing.Web.Models
@model WorkgroupModifyModel

@{
	ViewBag.Title = "Edit";
}

@{
	Bundles.Reference("css/single/jquery.multiselector.css");
	Bundles.Reference("scripts/public/single/jquery.multiselector.js");
    Bundles.Reference("Css/single/chosen.css");
    Bundles.Reference("scripts/public/single/chosen.jquery.js");
    Bundles.Reference("Scripts/public/common/jquery.qtip.js");
}

@section AdditionalScripts
{
	<script type="text/javascript">

		$(function () {

			$("#SelectedOrganizations").multiSelector({ placeholder: "Search Organizations", showOptions: true });

		})

	</script>

    <style type="text/css">
	
        .selector {margin: 2em 0;}
        .selector h3 {margin-bottom: .5em;}
	
        header.title
        {
            border-top: 1px solid #DDDDDD; 
            border-bottom: 1px solid #DDDDDD; 
            font-size: large; 
            padding: 1em;
        }
	
    </style>
    
    <script type="text/javascript">
        $(document).ready(function () {
            $(".chzn-select").chosen({ no_results_text: "No results matched", search_contains: true });

            $(".showTip").qtip({
                overwrite: false,
                show: {
                    event: 'mouseenter focus',
                    ready: false
                },
                hide: {
                    event: 'mouseleave blur'
                },
                position: {
                    my: 'bottom center',
                    at: 'top center'
                }
            });

            $("#Workgroup_SyncAccounts").change(function () {
                var hasAccounts = '@Model.Workgroup.Accounts.Any()';
                var currentSelection = '@Model.Workgroup.SyncAccounts';
                var currentValue = $(this).is(':checked');
                //when sync accounts is true currentValue = true
                //when sync accounts is false currentValue = false

                if (hasAccounts.toLowerCase() == "true" && currentSelection.toLowerCase() == "false" && currentValue == false) {
                    alert("This workgroup has existing accounts. If you turn on Synchronize Accounts, the existing accounts may be removed when the accounts are updated overnight.");
                }

            });
        });


        

    </script>
}


@section SubNav
{
	<ul class="navigation">
		<li>@Html.ActionLink("Details", "Details", new { id = @Model.Workgroup.Id }, new { @class = "button" })</li>
		<li>@Html.ActionLink("Back to List", "Index", "Edit", new { @class = "button" })</li>
	</ul>
}

@using (Html.BeginForm())
{
	@Html.AntiForgeryToken()
	@Html.ValidationSummary(true)
	@Html.Hidden("id", Model.Workgroup.Id)
<section class="ui-corner-all">
@* Legend is required if you have more than one widget/unit to help the user understand what is being asked of them.
Example: Dinosaur 1  *@
	<header class="ui-corner-top ui-widget-header">Workgroup</header>
	
		<div class="section-text">
			@*<h4>Form Header</h4>*@
			@*<p>Be specific so the user understands what exactly you are looking for.  Example: After Dinosaur 1 moves out of his/her parents' den what will Dinosaur 1 do?  We need to know his employment plan, feeding area, as well as living situation.  This information will not be sold or given to carnivores.</p>*@
			<p>All required fields are in <strong>bold</strong> and have a red <span class="required">*</span> next to the field label.</p>        
		</div>

	<div class="section-contents">

		<ul>
			@Html.Partial("_WorkgroupForm")

			@Html.HiddenFor(model => model.Workgroup.Id)
			<li>
				@* For the clear and submit buttons an empty label is required. Example: <label>&nbsp;</label> *@
				<div class="editor-label">&nbsp;</div>
				<div class="editor-field">
				<input class="button" type="submit" value="Save" /> | @Html.ActionLink("Cancel", "Index")
				</div>
			</li>
		</ul>

	</div>



</section>
}



